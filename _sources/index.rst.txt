.. pycobra documentation master file, created by
   sphinx-quickstart on Mon Jul 10 18:18:06 2017.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to pycobra's documentation!
===================================

pycobra is a python package which implements ensemble learning algoirthms. It also has a helpful suite of diagnostic and visualisation methods to analyse the aggregates and also the estimators used to create them.

What is Ensemble Learning?
--------------------------

`Ensemble learning <https://en.wikipedia.org/wiki/Ensemble_learning>`_ (also known referred to as predictor aggregation) techniques use multiple machine learning algorithms to obtain better predictive performance. Ensemble Learning methods are used for both classification and prediction techniques. The Random Forest algorithm is probably the most known among these class of algorithms, and recently more popular ensemble learning algorithms such as AdaBoost have been regularly winning Kaggle Competitions. 


Why pycobra?
------------

pycobra is `scikit learn <https://scikit-learn.org/stable>`_ compatible, and allows the user to plug in their own pre-trained machine learning models to create new aggregates. Since it largely follows ``scikit-learn`` coding conventions and usage, it is easy to use and any object with a ``predict()`` method can be used to create the aggregate.

While some of these ensemble learning algorithms we mentioned earlier are availble through the open source python machine learning community, it largely works as a black box - it's function is to merely predict, and not analyse how the ensemble was made or the machines used to create the ensemble. pycobra aims to serve as a regression analysis toolkit as well, with options to plot predictions, boxplots, QQ-plots, and compare performance between machines.

pycobra includes implementations of the COBRA algorithm introduced by Biau et al., 2016, the Exponential Weighted Aggregate (EWA) introduced by Vovk, 1990; and a COBRA flavored majority vote inspired by Mojirsheibani, 1999. 


Features and Usage
------------------

Setting up a pycobra estimator is very easy, and is akin to how scikit-learn estimators are set up::

	``cobra = Cobra() ``
	``cobra.fit(X, y)``

is enough to train the machine, and using cobra's ``predict()`` method let's it predict on input vectors.
In this case, we are creating an object of the ``Cobra`` class which implements the COBRA aggregation method. 

Since we aren't specifying which machines to use in the aggregate, the 4 default machines for prediction (Ridge Regression, Lasso regression, Decision Tree, Random Forest) are loaded. We can keep adding machines to the aggregate with the ``load_machine()`` method. By running ``load_machine_predictions()`` after we add the new machines, we can *update* our estimator. 

pycobra also allows us to optimise the ensemble by choosing a subset of machines, or optimise it's hyperparameters. This is done with the `Diagnostics` class, which offers multiple methods to understand the optimal behaviour of the estimate. 

We set up our diagnostics class by simply passing our ensemble to it::

``cobra_diagnostics = Diagnostics(cobra)``


To find the optimal epsilon for this aggregate, we run::

	``cobra_diagnostics.optimal_epsilon(X_eps, Y_eps, line_points=100)``

returns::

	``(0.49012865501307668, 0.10577705316919428)``

which tells us the optimal epsilon for the input vector passed, as well as the MSE for that value of epsilon.

Visualisation is equally straightforward::

``cobra_vis = Visualisation(cobra)``


You can find the source-code on `GitHub <https://github.com/bhargavvader/pycobra>`_. 
For complete examples and usage, the Jupyter notebooks illustrate the capacity of pycobra.

- `Basic Usage <https://github.com/bhargavvader/pycobra/blob/master/notebooks/pycobra.ipynb>`_
- `Advanced Usage <https://github.com/bhargavvader/pycobra/blob/master/notebooks/regression.ipynb>`_
- `Visualisations <https://github.com/bhargavvader/pycobra/blob/master/notebooks/visualise.ipynb>`_
- `Voronoi Tesselations <https://github.com/bhargavvader/pycobra/blob/master/notebooks/voronoi_clustering.ipynb>`_

.. toctree::
   :maxdepth: 2
   :caption: Contents:



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
